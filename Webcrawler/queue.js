// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, ForagerQueue, ObjectId, QueueLink, QueueLinkSchema, Schema, mongoose, url,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  url = require("url");

  EventEmitter = require("events").EventEmitter;

  mongoose = require("mongoose");

  Schema = mongoose.Schema;

  ObjectId = Schema.ObjectId;

  QueueLinkSchema = new Schema({
    scanId: ObjectId,
    url: String,
    links: [String],
    status: {
      type: Number,
      "default": -1
    }
  });

  QueueLink = mongoose.model("QueueLink", QueueLinkSchema);

  ForagerQueue = (function(_super) {
    var getLink;

    __extends(ForagerQueue, _super);

    function ForagerQueue(scanId) {
      this.scanId = scanId;
    }

    getLink = function(urlString, cb) {
      return QueueLink.findOne().where('url').equals(urlString).exec(cb);
    };

    ForagerQueue.prototype.add = function(urlString) {
      return getLink(function(err, link) {
        var newLink;
        if (!link) {
          newLink = new QueueLink({
            url: urlString,
            scanId: this.scanId
          });
          return newLink.save(function(err) {
            if (!err) {
              return this.emit("add", urlString);
            }
          });
        }
      });
    };

    ForagerQueue.prototype.checkCompleted = function(urlString, cb) {
      return QueueLink.where('status').ne(-1).ne(0).limit(1).exec(cb);
    };

    ForagerQueue.prototype.setCompleted = function(urlString, status, pageLinks) {
      return getLink(urlString, function(err, link) {
        link.status = status;
        link.links = pageLinks;
        return link.save(function(err) {
          if (err) {
            Console.log('could not save ' + urlString);
          }
          if (!err) {
            return this.emit("complete", urlString);
          }
        });
      });
    };

    ForagerQueue.prototype.completedSize = function(cb) {
      return QueueLink.where('status').ne(-1).ne(0).count(cb);
    };

    ForagerQueue.prototype.awaitSize = function(cb) {
      return QueueLink.find({
        status: -1
      }).count(cb);
    };

    ForagerQueue.prototype.getAwaiting = function(num, cb) {
      if (num) {
        return QueueLink.find({
          status: -1
        }).limit(num).exec(cb);
      } else {
        return QueueLink.find({
          status: -1
        }).exec(cb);
      }
    };

    return ForagerQueue;

  })(EventEmitter);

  exports.ForagerQueue = ForagerQueue;

}).call(this);
