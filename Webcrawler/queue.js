// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, ForagerQueue, url,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  url = require("url");

  EventEmitter = require("events").EventEmitter;

  ForagerQueue = (function(_super) {

    __extends(ForagerQueue, _super);

    function ForagerQueue() {
      this.hashMap = {};
    }

    ForagerQueue.prototype.add = function(urlString) {
      if (!this.has(urlString)) {
        this.hashMap[urlString] = false;
        return this.emit("add", urlString);
      }
    };

    ForagerQueue.prototype.has = function(urlString) {
      return this.hashMap.hasOwnProperty(urlString);
    };

    ForagerQueue.prototype.checkCompleted = function(urlString) {
      return this.hashMap[urlString];
    };

    ForagerQueue.prototype.setCompleted = function(urlString) {
      this.hashMap[urlString] = true;
      return this.emit("complete", urlString);
    };

    ForagerQueue.prototype.completedSize = function() {
      var key, size;
      size = 0;
      for (key in this.hashMap) {
        if (this.hashMap[key] === true) {
          size++;
        }
      }
      return size;
    };

    ForagerQueue.prototype.awaitSize = function() {
      var key, size;
      size = 0;
      for (key in this.hashMap) {
        if (this.hashMap[key] === false) {
          size++;
        }
      }
      return size;
    };

    ForagerQueue.prototype.getAwaiting = function() {
      var awaiting, key;
      awaiting = {};
      for (key in this.hashMap) {
        if (this.hashMap[key] === false) {
          awaiting[key] = false;
        }
      }
      return awaiting;
    };

    return ForagerQueue;

  })(EventEmitter);

  exports.ForagerQueue = ForagerQueue;

}).call(this);
